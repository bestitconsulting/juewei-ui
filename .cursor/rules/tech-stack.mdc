---
description: Juewei UI restaurant website tech stack and dependencies guide
globs: package.json,next.config.ts,tsconfig.json,app/**/*,components/**/*
alwaysApply: true
---
# Juewei UI Tech Stack & Dependencies Guide

## Project Overview

**Juewei UI** is a restaurant website built on modern React/Next.js stack with:

- **Website**: Next.js 15 restaurant website with food brand design
- **Multi-language**: Chinese and English support with Source Han Sans fonts
- **Components**: Restaurant-focused React components built on shadcn/ui + Tailwind CSS
- **Food Brand**: Warm color palette optimized for restaurant branding

## Core Framework Stack

### **Next.js 15** (App Router)

- **Framework**: React meta-framework with App Router architecture
- **Features Used**: Server components, image optimization, internationalization
- **Best Practice**: Use App Router patterns, optimize for restaurant content
- **Restaurant Features**: Multi-language routing, food image optimization

### **React 18**

- **UI Library**: Core React library with concurrent features
- **Features**: Suspense, automatic batching, server components
- **Best Practice**: Use React 18 patterns for restaurant components
- **Restaurant Usage**: Language switching, image carousels, form handling

### **TypeScript 5**

- **Configuration**: Strict mode enabled for better type safety
- **Best Practice**: Modern TS version with restaurant-specific types
- **Restaurant Types**: Multi-language props, food product interfaces

## UI Component System

### **Shadcn/UI Components** (v1.x series)
Complete accessibility-first component library ecosystem:

**Best Practices**:
- Use compound component patterns for restaurant components
- Always customize with Tailwind classes, not inline styles
- Implement proper ARIA attributes (built-in)
- Wrap in custom components for consistent restaurant styling

### **Juewei UI Component Pattern**
- **Location**: `/components/ui/` directory
- **Philosophy**: Copy-paste components, not NPM dependencies
- **Styling**: Tailwind CSS + CSS variables for food brand theming
- **Variants**: Uses `class-variance-authority` for type-safe restaurant variants
- **Restaurant Focus**: Food brand colors, multi-language support, restaurant-specific components

## Styling & Design System

### **Tailwind CSS 4.x** + Restaurant Ecosystem
```json
{
  "tailwindcss": "^4.0.0",
  "@tailwindcss/forms": "^0.5.4",
  "@tailwindcss/typography": "^0.5.9",
  "tailwindcss-animate": "^1.0.7",
  "tailwind-merge": "^2.0.0"
}
```

**Restaurant Best Practices**:
- Use `cn` utility for conditional classes: `cn(baseClasses, conditionalClasses)`
- Leverage CSS variables for food brand theming: `hsl(var(--food-primary))`
- Use plugins for forms and typography with Chinese font support
- Implement consistent spacing and food brand color systems
- **Food Brand Colors**: Orange, red, yellow gradients for appetizing appeal

### **Animation Libraries**
- **Tailwind Animate**: Simple CSS animations for restaurant components
- **CSS Transitions**: Smooth hover effects for food images and buttons
- **Best Practice**: Use CSS animations for restaurant interactions, avoid heavy animations

```typescript
// Restaurant animation best practices:
// Smooth food image hover effects
className="transition-transform duration-300 hover:scale-105"

// Restaurant button animations
className="transition-all duration-200 hover:bg-orange-600 hover:shadow-lg"

// Carousel transitions for food images
className="transition-opacity duration-500 ease-in-out"
```

## State Management & Forms

### **React Context** (Language State)
- **Philosophy**: Simple state management for restaurant language switching
- **Usage**: Language preferences, theme state, restaurant-specific UI state
- **Best Practice**: Use React Context for restaurant language management

```typescript
interface LanguageState {
  language: 'en' | 'zh'
  setLanguage: (language: 'en' | 'zh') => void
}

export const LanguageContext = createContext<LanguageState>({
  language: 'en',
  setLanguage: () => {},
})
```

### **React Hook Form** + Validation
- **Form Library**: Performant, uncontrolled forms for restaurant contact forms
- **Validation**: Built-in validation for restaurant forms
- **Integration**: Works seamlessly with shadcn/ui form components

```typescript
// Restaurant form setup:
const contactSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
  message: z.string().min(10),
  language: z.enum(['en', 'zh']),
})

function RestaurantContactForm() {
  const form = useForm<z.infer<typeof contactSchema>>({
    resolver: zodResolver(contactSchema),
  })

  return <form onSubmit={form.handleSubmit(onSubmit)}>...</form>
}
```

### **Zod** (Schema Validation)
- **Usage**: Restaurant form validation, contact form validation
- **Best Practice**: Define restaurant-specific schemas, leverage type inference

## Content Management System

### **Restaurant Content Management**
```json
{
  "next": "^15.0.0",
  "react": "^18.0.0",
  "typescript": "^5.0.0"
}
```

**Restaurant Features**:
- Multi-language content management
- Food product data management
- Restaurant image optimization
- SEO optimization for restaurant listings

### **Restaurant Data Structure**
**Product Data** (Restaurant products):
- `lib/data/products.ts`: Restaurant product information
- `lib/i18n/translations.ts`: Multi-language content
- `lib/i18n/language-context.tsx`: Language switching

**Image Management**:
- WebP optimization for food photography
- Responsive images for restaurant products
- Carousel image management

**Best Practices**:
- Use TypeScript for restaurant data types
- Optimize images for food photography
- Implement proper SEO for restaurant content

## Development Experience

### **Code Quality Tools**
```json
{
  "eslint": "^8.45.0",
  "@typescript-eslint/eslint-plugin": "^6.1.0",
  "@typescript-eslint/parser": "^6.1.0",
  "eslint-config-next": "^15.0.0",
  "eslint-config-prettier": "^8.8.0",
  "prettier": "^3.0.0",
  "prettier-plugin-tailwindcss": "^0.4.1"
}
```

**Restaurant Development Workflow**:
- **ESLint**: Code quality for restaurant components
- **Prettier**: Code formatting with Tailwind plugin
- **TypeScript**: Type safety for restaurant data

### **Restaurant Development Tools**
- **Next.js Dev Server**: Hot reload for restaurant components
- **Tailwind CSS IntelliSense**: Food brand color suggestions
- **TypeScript**: Restaurant-specific type checking
- **Image Optimization**: Next.js Image component for food photography

## Restaurant Automation

### **Python Scripts**
```json
{
  "scripts": {
    "crawl": "python scripts/crawl_images.py",
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

### **Restaurant Content Automation**
```json
{
  "crawl_images.py": "Image crawling for restaurant content",
  "requirements.txt": "Python dependencies for automation",
  "run_crawler.sh": "Shell script for content management"
}
```

**Restaurant Best Practices**:
- Use Python scripts for restaurant content management
- Automate image optimization for food photography
- Implement content crawling for restaurant data
- Use shell scripts for deployment automation

## Analytics & External Services

### **Vercel Deployment**
- **Analytics**: Built-in Vercel Analytics for restaurant website
- **OG Images**: Next.js Image optimization for food photography
- **Best Practice**: Use Vercel's native tooling for restaurant website performance

### **Restaurant Analytics**
- **Google Analytics**: Restaurant website traffic tracking
- **SEO**: Restaurant-specific SEO optimization
- **Best Practice**: Implement restaurant-specific tracking and analytics

### **Restaurant Services**
- **Contact Forms**: Restaurant contact form handling
- **Multi-language**: Restaurant language switching
- **Best Practice**: Use Next.js API routes for restaurant functionality

## Utility Libraries

### **Restaurant Utilities**
- **cn utility**: Conditional className utility for restaurant components
- **Next.js Image**: Optimized image handling for food photography
- **Best Practice**: Use Next.js utilities for restaurant website optimization

```typescript
// âœ… Good: Restaurant component utilities
import { cn } from '@/lib/utils'
import Image from 'next/image'

// Restaurant image optimization
<Image
  src="/carousel1/hero-01.webp"
  alt="Delicious Juewei food products"
  width={800}
  height={400}
  className="w-full h-auto rounded-lg"
  priority={true}
/>
```

### **Restaurant UI Utilities**
- **cn utility**: Conditional className utility for restaurant styling
- **Tailwind CSS**: Food brand color system and responsive design
- **Source Han Sans**: Chinese font optimization for restaurant content

### **Restaurant Data**
- **Product data**: Restaurant product information and descriptions
- **Multi-language**: Chinese and English content management
- **Image optimization**: WebP format for food photography
