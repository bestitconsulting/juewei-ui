---
description: Creating or updating landing page components for Juewei UI restaurant website
globs: components/**/*.tsx,app/**/*.tsx
alwaysApply: true
---
# Juewei UI Restaurant Components Guide

## Component Architecture & Philosophy

Juewei UI restaurant components follow a **shadcn-inspired** design pattern with these core principles:

- **Copy-paste friendly**: Components are self-contained with minimal external dependencies
- **Highly configurable**: Extensive props for customization without code changes
- **Accessibility-first**: Built on Radix UI primitives with proper ARIA attributes
- **Responsive by default**: Mobile-first design with Tailwind CSS
- **Theme-aware**: Support for food brand colors and restaurant-specific variants
- **Multi-language**: Support for Chinese and English content
- **Food-focused**: Designed for restaurant branding and food photography

## Naming Conventions

### Component Names

All restaurant components follow this pattern:

```typescript
// ✅ Correct naming pattern for restaurant components
export const [Purpose][Section] = () => {}

// Examples from Juewei UI:
BannerSection              // Hero banner component
HeroCarousel              // Image carousel component
BrandAdvantages           // Brand highlights
ProductHeroCarousel       // Product showcase
PartnershipCta            // Partnership call-to-action
LanguageSwitcher          // Language toggle
ScrollToTop               // Scroll functionality
```

### File Organization

```text
components/
├── ui/                    # Shadcn UI base components
│   ├── button.tsx
│   ├── card.tsx
│   ├── carousel.tsx
│   └── ...
├── banner-section.tsx     # Restaurant-specific components
├── hero-carousel.tsx
├── brand-advantages.tsx
├── product-hero-carousel.tsx
├── partnership-cta.tsx
├── language-switcher.tsx
└── scroll-to-top.tsx
```

**Restaurant Component Categories**: `banner`, `carousel`, `brand`, `product`, `partnership`, `navigation`

## Required Component Structure

### 1. File Header Pattern

```typescript
'use client';  // Always first line for interactive components

import { cn } from '@/lib/utils';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

/**
 * A restaurant component for the Juewei UI website.
 * [Clear description of purpose and usage context]
 */
```

### 2. Props Interface Pattern

**Always use inline type definitions** (not separate interfaces):

```typescript
export const RestaurantComponentName = ({
  // Core content props
  children,
  className,
  title,
  description,
  
  // Restaurant-specific props
  images = [],
  products = [],
  language = 'en',
  
  // Functional props with sensible defaults
  buttonLabel = 'Learn More',
  textPosition = 'center',
  variant = 'primary',
  
  // Boolean flags with defaults
  withBackground = false,
  withCarousel = false,
  withLanguageToggle = false,
  
  // Event handlers with empty defaults
  onImageClick = () => {},
  onProductClick = () => {},
}: {
  // Always use React.ReactNode for flexible content
  children?: React.ReactNode;
  className?: string;
  title?: string | React.ReactNode;
  description?: string | React.ReactNode;
  
  // Restaurant-specific types
  images?: Array<{ src: string; alt: string; width?: number; height?: number }>;
  products?: Array<{ name: string; description: string; image: string }>;
  language?: 'en' | 'zh';
  
  // String props with specific values
  buttonLabel?: string;
  textPosition?: 'center' | 'left';
  variant?: 'primary' | 'secondary' | 'accent';
  
  // Boolean props
  withBackground?: boolean;
  withCarousel?: boolean;
  withLanguageToggle?: boolean;
  
  // Event handlers
  onImageClick?: (index: number) => void;
  onProductClick?: (product: any) => void;
}) => {
```

## Styling Conventions

### 1. className Assembly Pattern

**Always use cn utility** for conditional classes:

```typescript
<section
  className={cn(
    // Base classes first (required styling)
    'w-full flex flex-col justify-center items-center gap-8 py-12 lg:py-16',

    // Restaurant-specific background variants
    withBackground && variant === 'primary'
      ? 'bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20'
      : '',
    withBackground && variant === 'secondary'
      ? 'bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20'
      : '',

    // Food brand specific classes
    withCarousel ? 'relative overflow-hidden' : '',
    withLanguageToggle ? 'relative' : '',

    // User-provided className last
    className,
  )}
>
```

### 2. Container Structure Pattern

```typescript
<section className="outer-section-classes">
  {/* Restaurant background effects */}
  {withBackground ? (
    <div className="absolute inset-0 bg-gradient-to-br from-orange-50/50 to-red-50/50 dark:from-orange-900/10 dark:to-red-900/10" />
  ) : null}

  {/* Main content container */}
  <div
    className={cn(
      'container mx-auto w-full px-4 py-12 lg:py-16 flex flex-col items-center justify-center relative z-10',
      innerClassName,
    )}
  >
    {/* Content wrapper */}
    <div className={cn(
      'flex flex-col gap-6 max-w-4xl',
      textPosition === 'center'
        ? 'items-center text-center'
        : 'items-start text-left',
    )}>
      {/* Restaurant component content */}
    </div>
  </div>
</section>
```

### 3. Responsive Design Pattern

Follow **mobile-first** approach:

```typescript
// ✅ Correct responsive classes
'w-14 h-14 shrink-0 rounded-full sm:w-16 sm:h-16 md:w-20 md:h-20'
'text-2xl md:text-3xl lg:text-4xl'
'py-12 lg:py-16'
'gap-4 md:gap-6 lg:gap-8'

// ❌ Avoid desktop-first
'lg:w-20 lg:h-20 md:w-16 md:h-16 w-14 h-14'
```

## Content Rendering Patterns

### 1. Title/Description Component Pattern
**Always provide both string and component alternatives**:

```typescript
{title ? (
  <h2 className="text-2xl md:text-3xl lg:text-4xl font-semibold leading-tight">
    {title}
  </h2>
) : (
  titleComponent
)}

{description ? (
  <p className="md:text-lg -mt-3">{description}</p>
) : (
  descriptionComponent
)}
```

### 2. Conditional Feature Rendering
```typescript
{withAvatars ? (
  <div className="flex mb-6">
    {/* Avatar components with consistent styling */}
  </div>
) : null}

{/* Alternative using && operator for simpler conditions */}
{children && <div className="mt-4">{children}</div>}
```

## Color System & Variants

### 1. Restaurant Food Brand Variants
**Always support food brand color variants**:
```typescript
// Food brand background variants
variant === 'primary' ? 'bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20' : ''
variant === 'secondary' ? 'bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20' : ''
variant === 'accent' ? 'bg-gradient-to-br from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20' : ''

// Food brand border variants
variant === 'primary' ? 'border-2 border-orange-500' : ''
variant === 'secondary' ? 'border-2 border-yellow-500' : ''
variant === 'accent' ? 'border-2 border-red-500' : ''
```

### 2. Dark Mode Support
**Always include dark mode variants for food branding**:
```typescript
'bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20'
'text-gray-800 dark:text-gray-200'
'dark:opacity-80 opacity-100'
'text-orange-600 dark:text-orange-400'
```

## State Management Patterns

### 1. Event Handler Defaults
```typescript
// ✅ Always provide safe defaults
onSubmit = () => {},
onClick = () => {},
onToggle = () => {},

// Props interface
onSubmit?: (e: React.FormEvent<HTMLFormElement>) => void;
```

### 2. Boolean Flag Patterns
```typescript
// ✅ Descriptive boolean props with defaults
withBackground = false,
withBackgroundGlow = false,
withAvatars = false,
disabled = false,

// ❌ Avoid ambiguous boolean names
isActive = false,     // What does "active" mean?
enabled = true,       // Double negative with disabled
```

## Accessibility Standards

### 1. Form Accessibility
```typescript
<Label htmlFor="email" className="sr-only">
  {inputLabel}
</Label>
<Input
  type="email"
  id="email"
  name="email"
  placeholder={placeholderLabel}
  required
  disabled={disabled}
/>
```

### 2. Restaurant Image Accessibility
```typescript
<Image
  src="/carousel1/hero-01.webp"
  alt="Delicious Juewei food products"  // Always meaningful alt text for food
  width={800}
  height={400}
  className="w-full h-auto rounded-lg"
  priority={true}  // For hero images
/>
```

### 3. Multi-language Accessibility
```typescript
<div lang={language === 'zh' ? 'zh-CN' : 'en'}>
  <h2 className="text-2xl font-bold">
    {language === 'zh' ? '绝味食品' : 'Juewei Food'}
  </h2>
</div>
```

## Performance Patterns

### 1. Import Organization
```typescript
// External libraries first
import { useState } from 'react';

// Next.js components
import Image from 'next/image';

// Internal utilities
import { cn } from '@/lib/utils';

// UI components
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

// Restaurant-specific components
import { LanguageSwitcher } from './language-switcher';
import { ScrollToTop } from './scroll-to-top';
```

### 2. Conditional Rendering Optimization
```typescript
// ✅ Efficient conditional rendering
{withBackgroundGlow ? (
  <div className="background-container">
    <GlowBg variant={backgroundGlowVariant} />
  </div>
) : null}

// ❌ Avoid always-rendered hidden elements
<div className={withBackgroundGlow ? 'block' : 'hidden'}>
  <GlowBg variant={backgroundGlowVariant} />
</div>
```

## Export Patterns

### 1. Component Exports
```typescript
// Individual component files
export const BannerSection = ({ ... }) => { ... };
export const HeroCarousel = ({ ... }) => { ... };
export const ProductHeroCarousel = ({ ... }) => { ... };

// Index files - centralized exports
export { BannerSection } from './banner-section';
export { HeroCarousel } from './hero-carousel';
export { ProductHeroCarousel } from './product-hero-carousel';
```

### 2. Restaurant Component Exports
```typescript
// For restaurant-specific components
export {
  BannerSection,
  HeroCarousel,
  BrandAdvantages,
  ProductHeroCarousel,
  PartnershipCta,
  LanguageSwitcher,
  ScrollToTop,
} from './index';
```

## Common Anti-Patterns to Avoid

### ❌ Don't Do
```typescript
// Missing 'use client' directive for interactive components
// Missing default values for optional props
// Using separate interface definitions
// Hardcoded styles without food brand variants
// Missing dark mode support
// Inconsistent naming (not following restaurant patterns)
// Using div for semantic sections
// Missing accessibility attributes
// Missing multi-language support

// Bad prop interface
interface Props {
  title: string;
}
export const BadComponent = (props: Props) => {}

// Bad conditional classes
className={`base-class ${isActive ? 'active-class' : ''}`}

// Missing food brand colors
className="bg-blue-500"  // Not food brand appropriate
```

### ✅ Do This Instead
```typescript
'use client';

export const RestaurantGoodComponent = ({
  title,
  variant = 'primary',
  withBackground = false,
  language = 'en',
}: {
  title?: string | React.ReactNode;
  variant?: 'primary' | 'secondary' | 'accent';
  withBackground?: boolean;
  language?: 'en' | 'zh';
}) => {
  return (
    <section
      className={cn(
        'w-full flex flex-col justify-center items-center gap-8 py-12 lg:py-16',
        variant === 'primary' ? 'bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20' : '',
        variant === 'secondary' ? 'bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20' : '',
        withBackground ? 'relative overflow-hidden' : '',
      )}
    >
      {/* Restaurant content */}
    </section>
  );
};
```

## Component Documentation

### JSDoc Pattern
```typescript
/**
 * A restaurant component for the Juewei UI website.
 * [Specific purpose and functionality description for restaurant branding].
 *
 * @example
 * <BannerSection
 *   title="Welcome to Juewei"
 *   description="Delicious food products"
 *   variant="primary"
 *   withBackground
 *   language="en"
 * />
 */
```

## Restaurant-Specific Guidelines

### Food Brand Colors
- **Primary**: Orange to red gradients (`from-orange-50 to-red-50`)
- **Secondary**: Yellow to orange gradients (`from-yellow-50 to-orange-50`)
- **Accent**: Red to pink gradients (`from-red-50 to-pink-50`)

### Multi-language Support
- Always support `language` prop with `'en' | 'zh'` values
- Use proper `lang` attributes for accessibility
- Consider Chinese font optimization with Source Han Sans

### Image Optimization
- Use Next.js `Image` component for all restaurant images
- Optimize for WebP format with proper alt text
- Consider food photography best practices

Follow these patterns for consistency across all restaurant components. Reference existing components like [banner-section.tsx](mdc:components/banner-section.tsx) and [hero-carousel.tsx](mdc:components/hero-carousel.tsx) for implementation examples.
